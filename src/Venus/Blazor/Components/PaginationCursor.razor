@inherits PaginationBase

<div class="@GetClass()" style="@GetStyle()">
    @if (LinkGenerator != null)
    {
        <a class="pagination-item" disabled="@(PreviousCursor==null)" href="@LinkGenerator(PreviousCursor)">
            @if (PaginationBackContent != null)
            {
                @PaginationBackContent
            }
            else
            {
                if (Resolver.IconStyle == IconStyle.Fluent)
                {
                    <FluentIcon Icon="@ComponentIcons.Fluent.ChevronLeft" Size="Resolver.DefaultButtonIconSize" />
                }
                else
                {
                    <FeatherIcon Icon="@ComponentIcons.Feather.ChevronLeft" Size="Resolver.DefaultButtonIconSize" />
                }
            }
        </a>
        <a class="pagination-item" disabled="@(NextCursor==null)" href="@LinkGenerator(NextCursor)">
            @if (PaginationNextContent != null)
            {
                @PaginationNextContent
            }
            else
            {
                if (Resolver.IconStyle == IconStyle.Fluent)
                {
                    <FluentIcon Icon="@ComponentIcons.Fluent.ChevronRight" Size="Resolver.DefaultButtonIconSize" />
                }
                else
                {
                    <FeatherIcon Icon="@ComponentIcons.Feather.ChevronRight" Size="Resolver.DefaultButtonIconSize" />
                }
            }
        </a>
    }
    else
    {
        <button class="pagination-item" @onclick="MovePrevious" disabled="@(PreviousCursor==null)">
            @if (PaginationBackContent != null)
            {
                @PaginationBackContent
            }
            else
            {
                if (Resolver.IconStyle == IconStyle.Fluent)
                {
                    <FluentIcon Icon="@ComponentIcons.Fluent.ChevronLeft" Size="Resolver.DefaultButtonIconSize" />
                }
                else
                {
                    <FeatherIcon Icon="@ComponentIcons.Feather.ChevronLeft" Size="Resolver.DefaultButtonIconSize" />
                }
            }
        </button>
        <button class="pagination-item" @onclick="MoveNext" disabled="@(NextCursor==null)">
            @if (PaginationNextContent != null)
            {
                @PaginationNextContent
            }
            else
            {
                if (Resolver.IconStyle == IconStyle.Fluent)
                {
                    <FluentIcon Icon="@ComponentIcons.Fluent.ChevronRight" Size="Resolver.DefaultButtonIconSize" />
                }
                else
                {
                    <FeatherIcon Icon="@ComponentIcons.Feather.ChevronRight" Size="Resolver.DefaultButtonIconSize" />
                }
            }
        </button>
    }
</div>

@code {

    [Parameter]
    public object? NextCursor { get; set; }

    [Parameter]
    public object? PreviousCursor { get; set; }

    [Parameter]
    public EventCallback<object> CursorChanged { get; set; }

    [Parameter]
    public Func<object?, string>? LinkGenerator { get; set; }

    private async Task MoveNext()
    {
        if (NextCursor != null)
        {
            await ChangeCursor(NextCursor);
        }
    }

    private async Task MovePrevious()
    {
        if (PreviousCursor != null)
        {
            await ChangeCursor(PreviousCursor);
        }
    }

    private async Task ChangeCursor(object cursor)
    {
        await CursorChanged.InvokeAsync(cursor);
    }
}
