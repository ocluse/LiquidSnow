@using Ocluse.LiquidSnow.Venus.Blazor.Contracts;
@using Ocluse.LiquidSnow.Venus.Blazor.Models;
@using Ocluse.LiquidSnow.Venus.Services;
@inject IBlazorResolver Resolver


<div class="snackbar-item @Resolver.ResolveSnackbarStatusToClass(Handle.Status)">
    @if (Resolver.IconStyle == IconStyle.Fluent)
    {
        <FluentIcon Icon="@Resolver.ResolveSnackbarStatusToIcon(Handle.Status)" Size="Resolver.SnackbarIconSize" Color="@Resolver.ResolveSnackbarStatusToColor(Handle.Status)" />
    }
    else
    {
        <FeatherIcon Icon="@Resolver.ResolveSnackbarStatusToIcon(Handle.Status)" Size="Resolver.SnackbarIconSize" Color="@Resolver.ResolveSnackbarStatusToColor(Handle.Status)" />
    }
    <div class="snackbar-label">@Handle.Message</div>

    @if(Resolver.IconStyle == IconStyle.Fluent)
    {
        <FluentIconButton Icon="@ComponentIcons.Fluent.Close" Size="Resolver.DefaultButtonIconSize" OnClick="OnClickClose" />
    }
    else
    {
        <IconButton Icon="@ComponentIcons.Feather.Close" Size="Resolver.DefaultButtonIconSize" OnClick="OnClickClose" />
    }
</div>

@code {
    [Parameter]
    [EditorRequired]
    public required ISnackbarItemHandle Handle { get; set; }

    [Parameter]
    public EventCallback<SnackbarMessage> OnClose { get; set; }

    public void OnClickClose()
    {
        Handle.Close();
    }
}
