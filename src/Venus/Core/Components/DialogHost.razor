@inject IDialogService DialogService
@inject IVenusResolver Resolver

<CascadingValue Value="this">
    @if (_showDialog || _showLoading)
    {
        <div class="dialog-host" @attributes="new Dictionary<string, object?>()">
            @if (_dialogType != null && _showDialog)
            {
                <div class="dialog-container" @onclick="OnDismiss">
                    <div class="dialog-content" @onclick:stopPropagation="true">
                        @if (!string.IsNullOrEmpty(_dialogHeader) || _showClose)
                        {
                            <div class="header-section">
                                @if (string.IsNullOrEmpty(_dialogHeader))
                                {
                                    <span class="dialog-header"></span>
                                }
                                else
                                {
                                    <h3 class="dialog-header">@_dialogHeader</h3>
                                }
                                @if (_showClose)
                                {
                                    @if(Resolver.IconStyle == IconStyle.Fluent)
                                    {
                                        <FluentIconButton Class="dialog-close" Icon="@ComponentIcons.Fluent.Close" OnClick="()=>CloseDialog()" />
                                    }
                                    else
                                    {
                                        <IconButton Class="dialog-close" Icon="@ComponentIcons.Feather.Close" OnClick="()=>CloseDialog()" />
                                    }
                                    
                                }
                            </div>
                        }
                        <DynamicComponent Type="_dialogType" Parameters="_dialogParameters" />
                    </div>
                </div>
            }

            @if (_showLoading)
            {
                <div class="loading-container">
                    <LoadingSpinner />
                    @if (!string.IsNullOrEmpty(_loadingMessage))
                    {
                        <div class="loading-message">@_loadingMessage</div>
                    }
                </div>
            }
        </div>
    }
</CascadingValue>
